//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;

public class PushPlayer : MonoBehaviour
{
    public float mass = 3f; // the lower the mass, the higher the impact
    public float hitForce = 2.5f; // impact "force" when hit by rigidbody 
    bool hitFrame;
    Vector3 impact = Vector3.zero; // character momentum 
    CharacterController myCharacter;
    Transform myTransform;

    void Start()
    {
        hitFrame = false;
        myCharacter = GetComponent<CharacterController>();
        myTransform = transform;
    }
    
    void Update()
    {
        if (hitFrame)
        { 
            // if momentum > 0.2...
            myCharacter.Move(impact * Time.deltaTime); // move character
        }
        else //if (impact.magnitude > 0.1f)
        {
            impact = Vector3.zero;
//            impact = Vector3.Lerp(impact, Vector3.zero, 5*Time.deltaTime);
        }

        hitFrame = false;
    }

    void OnControllerColliderHit(ControllerColliderHit col)
    {
        Collider c = col.collider;
        if (c == null ||
            c.gameObject.isStatic ||
            c.gameObject.layer == 14)
        {
            return;
        }

        if (col.gameObject.layer == 9 && !SimInstance.Instance.slowdownActive && !SimInstance.Instance.IsSimPaused())
        {
            AddImpact((myTransform.position-col.point));
        }
    }

    void OnCollisionEnter(Collision col)
    {
        AddImpact(col.relativeVelocity * hitForce);
    }

    void AddImpact(Vector3 force)
    {
        if (CameraManager.singleton.ovrPhysicsMove)
        {
            return;
        }

        hitFrame = true;
        var dir = force.normalized;
        dir.y = 0.0f; // add some velocity upwards - it's cooler this way
        impact += dir.normalized * force.magnitude / mass;
    }
}

